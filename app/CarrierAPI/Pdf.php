<?php

namespace App\CarrierAPI;

use App\Models\Company;
use App\Models\PrintFormat;
use App\Models\Shipment;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Storage;
use TCPDI;

class Pdf
{
    /*
      |--------------------------------------------------------------------------
      | Pdf Class
      |--------------------------------------------------------------------------
      |
      | This class is responsible for creating shipment labels and commercial invoices.
      | Labels are created by importing original PDF document generated by the carrier,
      | into a new PDF of the desired size with any additions required by IFS, such
      | as folding instructions and logos.
      |
     */

    public $size;
    public $output;
    public $encoded;
    protected $pdf;
    protected $tpl;      // tcpdf doesnt support arial font out of the box
    protected $marginLeft = 0;
    protected $marginTop = 0;
    protected $font = 'helvetica';
    protected $pageDims;
    protected $customerLabelRequired = false;
    protected $user = false;
    //
    protected $masterLabelRequired = false;
    protected $packageLabelRequired = false;
    protected $commercialInvoiceRequired = false;

    /**
     * Set up default values.
     *
     * @param  string  $this  ->size    Size of the PDF document required (accepts code defined in print formats table).
     * @param  string  $output  Valid values are (D) - download, (S) - base64 string, (I) - inline browser. *** All external API calls should use (S). Therefor param 3 should not be publicly available ***
     *
     * @return void
     */
    public function __construct($size = 'A4', $output = 'S', $encoded = true)
    {
        $this->user = false;

        // If User authenticated then use their label preferences
        if (Auth::check()) {
            $this->user = Auth::user();
            $this->customerLabelRequired = $this->user->customer_label;
        } else {
            $this->customerLabelRequired = false;
        }

        $this->pdf = new TCPDI();
        $this->size = $size;
        $this->output = $output;
        $this->encoded = true;

        // remove the default head/footers
        $this->pdf->setPrintHeader(false);
        $this->pdf->setPrintFooter(false);
    }

    /**
     * Manifest PDF.
     *
     * @param  type  $manifest
     *
     * @return type
     */
    public function createManifest($manifest)
    {
        $totalShipments = 0;
        $totalPieces = 0;
        $totalWeight = 0;

        // Add a blank page to the document
        $this->pdf->AddPage('P');

        $this->pdf->SetFont($this->font, '', 14);
        $this->pdf->Text(9, 5, 'Manifest '.$manifest->number);

        $this->pdf->SetY(12);
        $this->pdf->SetFont($this->font, 'I', 7);
        $this->pdf->SetFillColor(221, 221, 221);
        $this->pdf->Cell(22, 6, 'CONSIGNMENT', 1, 0, 'L', true);
        $this->pdf->Cell(27, 6, 'CARRIER#', 1, 0, 'L', true);
        $this->pdf->Cell(57, 6, 'SHIPPER', 1, 0, 'L', true);
        $this->pdf->Cell(42, 6, 'DESTINATION', 1, 0, 'L', true);
        $this->pdf->Cell(15, 6, 'SHIP DATE', 1, 0, 'L', true);
        $this->pdf->Cell(9, 6, 'SVC', 1, 0, 'C', true);
        $this->pdf->Cell(9, 6, 'PCS', 1, 0, 'R', true);
        $this->pdf->Cell(9, 6, 'WGT', 1, 0, 'R', true);
        $this->pdf->Ln();

        $this->pdf->SetFont($this->font, '', 6);
        $this->pdf->SetFillColor(255, 255, 255);
        foreach ($manifest->shipments as $shipment) {
            $this->pdf->Cell(22, 6, $shipment->consignment_number, 1, 0, 'L', true);
            $this->pdf->Cell(27, 6, $shipment->carrier_consignment_number, 1, 0, 'L', true);
            $this->pdf->Cell(57, 6, $shipment->company->company_name, 1, 0, 'L', true);
            $this->pdf->Cell(42, 6, $shipment->recipient_city.', '.$shipment->recipient_country_code, 1, 0, 'L', true);
            $this->pdf->Cell(15, 6, $shipment->ship_date->format('d-m-Y'), 1, 0, 'L', true);
            $this->pdf->Cell(9, 6, strtoupper($shipment->service->code), 1, 0, 'C', true);
            $this->pdf->Cell(9, 6, $shipment->pieces, 1, 0, 'R', true);
            $this->pdf->Cell(9, 6, $shipment->weight, 1, 0, 'R', true);
            $this->pdf->Ln();
            $totalShipments++;
            $totalPieces += $shipment->pieces;
            $totalWeight += $shipment->weight;
        }

        // Add Totals
        $this->pdf->Ln();

        $this->pdf->Cell(65, 6, 'Total Shipments : '.$totalShipments, 1, 0, 'R', true);
        $this->pdf->Cell(65, 6, 'Total Pieces : '.$totalPieces, 1, 0, 'R', true);
        $this->pdf->Cell(63, 6, 'Total Weight : '.$totalWeight.' kgs', 1, 0, 'R', true);
        $this->pdf->Ln();
        $this->pdf->Ln();
        $this->pdf->Cell(65, 6, 'Received in good condition by :', 0, 0, 'L', true);
        $this->pdf->Ln();
        $this->pdf->Cell(65, 6, 'Name : ', 1, 0, 'L', true);
        $this->pdf->Cell(65, 6, 'Signature : ', 1, 0, 'L', true);
        $this->pdf->Cell(38, 6, 'Date : ', 1, 0, 'L', true);
        $this->pdf->Cell(25, 6, 'Time : ', 1, 0, 'L', true);

        return $this->displayPdf($manifest->number.'.pdf', true);
    }

    /**
     * @param  type  $filename
     * @param  type  $encoded
     * @param  type  $output
     *
     * @return type
     */
    public function displayPdf($filename, $encoded)
    {
        if ($encoded) {
            return base64_encode($this->pdf->Output($filename, $this->output));
        } else {
            return $this->pdf->Output($filename, $this->output);
        }
    }

    /**
     * @param  type  $shipments
     *
     * @return type
     */
    public function createCollectionManifest($shipments)
    {
        // Add a blank page to the document
        $this->pdf->AddPage('P');

        $this->pdf->SetFont($this->font, 'BU', 15);

        $date = date('d-m-Y H:i', time());

        $this->pdf->Text(9, 5, 'Collection Manifest');

        $this->pdf->SetFont($this->font, 'BI', 12);
        $this->pdf->Text(155, 7, "Printed $date");

        $this->pdf->SetY(18);
        $this->pdf->SetFont($this->font, 'I', 7);
        $this->pdf->SetFillColor(221, 221, 221);
        $this->pdf->Cell(5, 5, '#', 1, 0, 'L', true);
        $this->pdf->Cell(23, 5, 'CONSIGNMENT#', 1, 0, 'L', true);
        $this->pdf->Cell(23, 5, 'CARRIER#', 1, 0, 'L', true);
        $this->pdf->Cell(38.5, 5, 'REFERENCE', 1, 0, 'L', true);
        $this->pdf->Cell(51.5, 5, 'RECIPIENT', 1, 0, 'L', true);
        $this->pdf->Cell(7, 5, 'CC', 1, 0, 'C', true);
        $this->pdf->Cell(15, 5, 'SHIP DATE', 1, 0, 'L', true);
        $this->pdf->Cell(9, 5, 'SVC', 1, 0, 'C', true);
        $this->pdf->Cell(7, 5, 'PCS', 1, 0, 'R', true);
        $this->pdf->Cell(9, 5, 'WGT', 1, 0, 'R', true);
        $this->pdf->Cell(7, 5, 'REC', 1, 0, 'R', true);
        $this->pdf->Ln();

        $this->pdf->SetFont($this->font, '', 6);
        $this->pdf->SetFillColor(255, 255, 255);

        $i = 1;

        foreach ($shipments as $shipment) {
            $recipient = $shipment->recipient_company_name ?: $shipment->recipient_name;
            $recipient .= ', '.$shipment->recipient_city;

            $this->pdf->Cell(5, 5, $i, 1, 0, 'L', true);
            $this->pdf->Cell(23, 5, $shipment->consignment_number, 1, 0, 'L', true);
            $this->pdf->Cell(23, 5, $shipment->carrier_consignment_number, 1, 0, 'L', true);
            $this->pdf->Cell(38.5, 5, $shipment->shipment_reference, 1, 0, 'L', true);
            $this->pdf->Cell(51.5, 5, strtoupper($recipient), 1, 0, 'L', true);
            $this->pdf->Cell(7, 5, $shipment->recipient_country_code, 1, 0, 'C', true);
            $this->pdf->Cell(15, 5, $shipment->ship_date->format('d-m-Y'), 1, 0, 'L', true);
            $this->pdf->Cell(9, 5, strtoupper($shipment->service->code), 1, 0, 'C', true);
            $this->pdf->Cell(7, 5, $shipment->pieces, 1, 0, 'R', true);
            $this->pdf->Cell(9, 5, $shipment->weight, 1, 0, 'R', true);
            $this->pdf->Cell(7, 5, '', 1, 0, 'R', true);
            $this->pdf->Ln();
            $i++;
        }

        $this->pdf->Ln();
        $this->pdf->SetFont($this->font, '', 10);
        $this->pdf->Cell(80, 8, 'Additional Pieces Collected (not detailed above):', 0, 0, 'R', true);
        $this->pdf->Cell(10, 3, '');
        $this->pdf->Cell(100, 8, '', 'B');

        $this->pdf->Ln();
        $this->pdf->Cell(80, 8, 'Total Pieces Collected:', 0, 0, 'R', true);
        $this->pdf->Cell(10, 3, '');
        $this->pdf->Cell(100, 8, '', 'B');
        $this->pdf->Ln();
        $this->pdf->Cell(80, 8, 'Comments:', 0, 0, 'R', true);
        $this->pdf->Cell(10, 3, '');
        $this->pdf->Cell(100, 8, '', 'B');
        $this->pdf->Ln();
        $this->pdf->Cell(80, 8, 'Customer Signature:', 0, 0, 'R', true);
        $this->pdf->Cell(10, 3, '');
        $this->pdf->Cell(100, 8, '', 'B');
        $this->pdf->Ln();
        $this->pdf->Cell(80, 8, 'Driver Signature:', 0, 0, 'R', true);
        $this->pdf->Cell(10, 3, '');
        $this->pdf->Cell(100, 8, '', 'B');
        $this->pdf->Ln();
        $this->pdf->Cell(80, 8, 'Date / Time:', 0, 0, 'R', true);
        $this->pdf->Cell(10, 3, '');
        $this->pdf->Cell(100, 8, '', 'B');

        return $this->displayPdf('collection_manifest.pdf', true);
    }

    /**
     * Possible choices - ALL, MASTER, INVOICE, CUSTOMS(INVOICE & MASTER).
     *
     * @param  type  $shipments
     * @param  type  $labelType  Values -['ALL', 'MASTER', 'INVOICE', 'CUSTOMS' - (INVOICE & MASTER)]
     *
     * @return type
     */
    public function createShippingDocs($shipments, $labelType)
    {
        // Build PDF
        foreach ($shipments as $shipment) {
            if (strtoupper($labelType) == 'DESPATCH') {
                $this->createDespatchNote($shipment->token, false);
                continue;
            }

            // Add Label unless request is only for commercial Invoices
            if (strtoupper($labelType) != 'INVOICE') {
                // If unable to create label return error
                $label = $this->createLabel($shipment, false, $labelType, false);
                if ($label == 'not found') {
                    return 'not found';
                }
            }

            // If not a document shipment and a customs entry is required
            if ($shipment->ship_reason != 'documents' && ! isDomestic($shipment->sender_country_code, $shipment->recipient_country_code)) {
                // Add Commercial Invoice unless request is for a master label only (A4 only)
                if ((strtoupper($labelType) != 'MASTER') && $this->size == 'A4') {
                    // If Customer requires a commercial invoice or Invoice requested using invType == "INVOICE/CUSTOMS"
                    if ($this->user && $this->user->hasIfsRole()) {
                        $commercial_invoice_required = true;
                    } else {
                        $commercial_invoice_required = Company::find($shipment->company_id)->commercial_invoice;
                    }

                    if ($commercial_invoice_required || $labelType == 'INVOICE' || $labelType == 'CUSTOMS') {
                        if ($shipment->hasUploadedDocument('invoice')) {
                            $this->importUploadedDocuments($shipment, 'invoice', (empty($labelType)) ? 4 : 1);
                        } else {
                            $this->createCommercialInvoice($shipment->token, [], false);

                            // Unless a request for Specific Documentation Set print 4 copies
                            if (empty($labelType)) {
                                $this->createCommercialInvoice($shipment->token, [], false);
                                $this->createCommercialInvoice($shipment->token, [], false);
                                $this->createCommercialInvoice($shipment->token, [], false);
                            }
                        }
                    }
                }
            }
        }

        return $this->displayPdf('shipping_docs.pdf', true);
    }

    /**
     * Generates a despatch note.
     *
     * @param  string  $token  Shipment identifier.
     * @param  array  $parameters  An array of options for customising invoice.
     *
     * @return  mixed
     */
    public function createDespatchNote($token, $output = true)
    {
        if (! $shipment = Shipment::whereToken($token)->first()) {
            return false;
        }

        // Add a blank page to the document
        $this->pdf->AddPage('P');

        $y = 5;

        $this->pdf->SetFont($this->font, 'B', 20);
        $this->pdf->Text(10, $y, $shipment->company->company_name);
        $this->pdf->SetFont($this->font, '', 10);
        $this->pdf->Text(10, $y = $y + 10, $shipment->company->address1);

        if ($shipment->company->address2) {
            $this->pdf->Text(10, $y = $y + 5, $shipment->company->address2);
        }

        $this->pdf->Text(10, $y = $y + 5, $shipment->company->city);
        $this->pdf->Text(10, $y = $y + 5, $shipment->company->state.' '.$shipment->company->postcode);
        $this->pdf->Text(10, $y = $y + 5, getCountry($shipment->company->country_code));

        $this->pdf->SetY(7);
        $this->pdf->SetX(130);
        $this->pdf->SetFillColor(255, 255, 255);
        $this->pdf->SetFont($this->font, 'B', 11);
        $this->pdf->Cell(70, 6, 'Despatch Note', 0, 0, 'C', true);
        $this->pdf->SetFont($this->font, '', 9);

        $this->pdf->SetY(15);
        $this->pdf->SetX(130);
        $this->pdf->Cell(35, 6, 'Order / Reference', 1, 0, 'L', true);
        $this->pdf->Cell(35, 6, $shipment->shipment_reference, 1, 0, 'R', true);
        $this->pdf->Ln();

        if ($shipment->consignment_number) {
            $this->pdf->SetX(130);
            $this->pdf->Cell(35, 6, 'Tracking Number', 1, 0, 'L', true);
            $this->pdf->Cell(35, 6, $shipment->consignment_number, 1, 0, 'R', true);
            $this->pdf->Ln();
        }

        $this->pdf->SetX(130);
        $this->pdf->Cell(35, 6, 'Date', 1, 0, 'L', true);
        $this->pdf->Cell(35, 6, $shipment->ship_date->format('d-m-Y'), 1, 0, 'R', true);

        $this->pdf->SetFont($this->font, '', 10);
        $this->pdf->SetY(50);
        $this->pdf->SetFont($this->font, 'I', 7);
        $this->pdf->SetFillColor(221, 221, 221);
        $this->pdf->Cell(15, 6, 'QTY', 1, 0, 'C', true);
        $this->pdf->Cell(60, 6, 'ITEM', 1, 0, 'L', true);
        $this->pdf->Cell(20, 6, 'UNIT PRICE', 1, 0, 'R', true);
        $this->pdf->Cell(20, 6, 'AMOUNT', 1, 0, 'R', true);

        $this->pdf->Ln();

        $this->pdf->SetFont($this->font, '', 6);
        $this->pdf->SetFillColor(255, 255, 255);
        foreach ($shipment->contents as $item) {
            $this->pdf->Cell(15, 6, $item->quantity, 1, 0, 'C', true);
            $this->pdf->Cell(60, 6, $item->description, 1, 0, 'L', true);
            $this->pdf->Cell(20, 6, $item->unit_value, 1, 0, 'R', true);
            $this->pdf->Cell(20, 6, number_format($item->quantity * $item->unit_value, 2), 1, 0, 'R', true);
            $this->pdf->Ln();
        }
        $this->pdf->SetX(105);
        $this->pdf->Cell(20, 6, $shipment->customs_value_currency_code.' '.$shipment->customs_value, 1, 0, 'R', true);

        $this->pdf->SetFont($this->font, 'B', 16);
        $this->pdf->Text(140, 38, 'Shipping Details');

        $this->pdf->SetFont($this->font, 'B', 11);
        $this->pdf->Text(140, $y = 48, ucwords($shipment->recipient_name));
        $y += 1;
        $this->pdf->SetFont($this->font, '', 9);

        if ($shipment->recipient_company_name) {
            $this->pdf->Text(140, $y += 4, ucwords($shipment->recipient_company_name));
        }

        $this->pdf->Text(140, $y += 4, ucwords($shipment->recipient_address1));

        if ($shipment->recipient_address2) {
            $this->pdf->Text(140, $y += 4, ucwords($shipment->recipient_address2));
        }

        $this->pdf->Text(140, $y += 4, ucwords($shipment->recipient_city));
        $this->pdf->Text(140, $y += 4, ucwords($shipment->recipient_state.' '.$shipment->recipient_postcode));
        $this->pdf->Text(140, $y += 4, getCountry($shipment->recipient_country_code));
        $this->pdf->Text(140, $y += 8, 'Tel: '.$shipment->recipient_telephone);

        if ($shipment->company->despatchNote) {
            $this->pdf->SetLineWidth(0.3);
            $this->pdf->Line(5, 140, 200, 140); //horizontal
            $this->pdf->SetFont($this->font, 'B', 16);
            $this->pdf->Text(9, 145, 'Returns');
            $this->pdf->SetFont($this->font, '', 9);
            $this->pdf->SetY(155);
            $this->pdf->WriteHTML($shipment->company->despatchNote->returns);
        }

        if ($output) {
            return $this->displayPdf('despatch_note'.'_'.$shipment->consignment_number.'.pdf', true);
        }
    }

    /**
     * Takes stored 6x4 label and returns it in the size requested by user
     * with the addition of printing/folding instructions for A4/LETTER sizes.
     *
     * @param  Shipment  $shipment
     * @param  type  $encoded
     * @param  type  $labelType
     * @param  type  $output
     *
     * @return bool|string
     */
    public function createLabel(Shipment $shipment, $encoded = true, $labelType = '', $output = true)
    {
        // get the original PDF generated by the carrier
        if (! $originalPdf = $this->getOriginalPdf($shipment)) {
            return 'not found';
        }

        // load the desired print format
        if (! $printFormat = PrintFormat::whereCode($this->size)->first()) {
            return false;
        }

        // Set the source data, get the number of pages in the PDF
        // and determine label requirements
        $pageCount = $this->pdf->setSourceData($originalPdf);
        $masterLabelProvided = ($pageCount > $shipment->pieces) ? true : false;
        $this->setLabelRequirements($shipment, $labelType);

        $masterLabelProvided = ($pageCount > $shipment->pieces) ? true : false;

        // insert each page of the original PDF into the new PDF
        for ($pageNo = 1; $pageNo <= $pageCount; $pageNo++) {
            // Print Driver and Customer Labels first if required
            if ($pageNo == 1) {
                // If Driver label required
                if ($this->masterLabelRequired) {
                    $this->addLabelToPdf($printFormat, $pageNo, $shipment, 'DRIVER');
                }

                // If Customer label required
                if ($this->customerLabelRequired) {
                    $this->addLabelToPdf($printFormat, $pageNo, $shipment, 'CUSTOMER');
                }
            }

            if ($masterLabelProvided && $pageNo == 1) {
                // This is not a package label so don't Add
            } else {
                if ($this->packageLabelRequired) {
                    // Add Package Label
                    $this->addLabelToPdf($printFormat, $pageNo, $shipment, '');
                }
            }
        }

        if ($output) {
            return $this->displayPdf($shipment->consignment_number.'.pdf', $encoded);
        }
    }

    /*
     * Get the path to label PDF on S3
     *
     * @return string   path
     */

    /**
     * Returns original PDF document generated by the carrier. Checks database first.
     * If no pdf label found within the database, Amazon S3 is checked.
     *
     * @param  mixed  $shipment  Loaded shipment model or shipment token.
     *
     * @return  PDF document
     */
    protected function getOriginalPdf($shipment)
    {
        $pdf = false;

        // if we have not been passed a loaded shipment model, load from token
        if (is_string($shipment)) {
            $shipment = Shipment::where('token', $shipment)->first();
        }

        // check the database for the base64 pdf and decode it
        if (isset($shipment->label->base64)) {
            $pdf = $this->decodeBase64($shipment->label->base64);
        }

        // if base64 pdf not stored in the DB, try S3 for the label
        if (is_null($pdf)) {
            $pathToFile = $this->getS3LabelPath($shipment->created_at, $shipment->consignment_number);
            if (Storage::disk('s3')->exists($pathToFile)) {
                $pdf = Storage::disk('s3')->get($pathToFile);
            }
        }

        return $pdf;
    }

    /*
     * Decode a Base64 string and check it's mime type to ensure that the file
     * has been decoded successfully.
     *
     * @return mixed - decoded file / boolean
     *
     */

    public function decodeBase64($base64)
    {
        $file = base64_decode($base64);

        $f = finfo_open();
        $type = finfo_buffer($f, $file, FILEINFO_MIME_TYPE);

        if ($type == 'application/pdf') {
            return $file;
        }

        return false;
    }

    protected function getS3LabelPath($createdAt, $consignmentNumber, $index = false)
    {
        return 'labels/'.date('Y/m', strtotime($createdAt)).'/'.$consignmentNumber.'.pdf';
    }

    public function setLabelRequirements($shipment, $labelType)
    {
        switch ($labelType) {
            case 'ALL':
                $this->masterLabelRequired = true;
                $this->packageLabelRequired = true;
                $this->customerLabelRequired = true;
                break;

            case 'MASTER':
                $this->masterLabelRequired = true;
                $this->packageLabelRequired = false;
                $this->customerLabelRequired = false;
                break;

            case 'CUSTOMS':
                $this->masterLabelRequired = true;
                $this->packageLabelRequired = false;
                $this->customerLabelRequired = false;
                break;

            case 'PACKAGE':
                $this->masterLabelRequired = false;
                $this->packageLabelRequired = true;
                $this->customerLabelRequired = false;
                break;

            default:
                $this->packageLabelRequired = true;
                if ($shipment->company->master_label) {
                    $this->masterLabelRequired = customsEntryRequired($shipment->sender_country_code, $shipment->recipient_country_code);
                    $this->masterLabelRequired = true;
                } else {
                    $this->masterLabelRequired = false;
                }
                // $this->customerLabelRequired = true;                         // Set in __construct from $user
                break;
        }
    }

    /**
     * Takes.
     *
     * @param  type  $shipment
     */
    public function addLabelToPdf($printFormat, $pageNo, $shipment, $labelType = '')
    {
        $this->tpl = $this->pdf->importPage($pageNo);
        $originalPdfSize = $this->pdf->getTemplateSize($this->tpl);

        // check if original file is larger than the size requested. if so, we will have to use the orginal file size.
        if ($originalPdfSize['h'] > $printFormat->height) {
            $this->pageDims = ['w' => $originalPdfSize['w'], 'h' => $originalPdfSize['h']];
        } else {
            $this->pageDims = ['w' => $printFormat->width, 'h' => $printFormat->height];
        }

        // add a blank page to the document
        $this->pdf->AddPage('P', [$this->pageDims['w'], $this->pageDims['h']]);

        // Set the margins - avoid cut off on some A4 printers
        $this->setTemplateMargins();

        // Rotate by X degrees
        $this->pdf->Rotate(-$this->rotate, $this->pageDims['w'] / 2, $this->pageDims['h'] / 2);

        // insert the original PDF
        $this->pdf->useTemplate($this->tpl, $this->marginLeft, $this->marginTop);

        // Rotate by X degrees
        $this->pdf->Rotate($this->rotate, $this->pageDims['w'] / 2, $this->pageDims['h'] / 2);

        // add any custom text or logos to our new pdf
        $this->addCustomisationToPdf($originalPdfSize, $shipment, $labelType);
    }

    /**
     * Sets margin on the pdf document to avoid cut off occuring on some A4 printers.
     *
     *
     * @return  void
     */
    protected function setTemplateMargins()
    {
        switch ($this->size) {
            case 'A4':
            case 'LETTER':
                $this->marginLeft = -($this->pageDims['h'] - 265);
                $this->marginTop = 75;
                $this->rotate = 90;
                break;
            default:
                $this->marginLeft = 0;
                $this->marginTop = 0;
                $this->rotate = 0;
                break;
        }
    }

    /**
     * Adds custom text/logos to pdf.
     *
     * @param  string  $this  ->size   Print format.
     * @param  array  $originalPdfSize  Size of original PDF from carrier.
     *
     * @return  void
     */
    protected function addCustomisationToPdf($originalPdfSize, $shipment, $labelType)
    {
        /*
         * ********************************************************************
         * If we have not been passed a loaded shipment model, load from token
         * To allow customisation with Shipment details eg IFS Consignment no,
         * Barcode, Customer Reference.
         * ********************************************************************
         */
        if (is_string($shipment)) {
            $shipment = Shipment::whereToken($shipment)->first();
        }

        $x = $originalPdfSize['w'];
        $y = $originalPdfSize['h'];

        $foldPosition = $this->pageDims['h'] / 2;
        if ($x > $foldPosition) {
            $foldPosition = $x;
        }

        switch ($this->size) {
            case 'A4':
            case 'LETTER':

                $this->pdf->Line(0, $foldPosition, 210, $foldPosition); //horizontal line
                $this->pdf->SetFont($this->font, 'B', 12);

                switch ($labelType) {
                    case 'DRIVER':
                        $this->pdf->Text(7, $y = $y + 5, 'Master Copy - Please give to Driver');
                        break;

                    case 'CUSTOMER':
                        $this->pdf->Text(7, $y = $y + 5, $labelType.' Copy - Retain for your own use');
                        break;

                    default:
                        $this->pdf->Text(7, $y = $y + 5, $labelType.'Label - Insert into Package Pouch');
                        $this->pdf->SetFont($this->font, 'B', 10);
                        $this->pdf->Text(7, $y = $y + 8, 'PRINTING GUIDELINES:');
                        $this->pdf->SetFont($this->font, 'B', 8);
                        $this->pdf->Text(13, $y = $y + 5, '1. Ensure that the print quality is good and that the barcodes are readable.');
                        $this->pdf->Text(13, $y = $y + 4, '2. Fold the printed page along the horizontal line above.');
                        $this->pdf->Text(13, $y = $y + 4, '3. Place the folded page in shipping pouch with the above label clearly visible and affix it to your shipment.');
                        $this->pdf->SetFont($this->font, 'B', 10);
                        $this->pdf->Text(7, $y = $y + 5, 'WARNING');
                        $this->pdf->SetFont($this->font, 'B', 8);
                        $this->pdf->Text(13, $y = $y + 5, 'Use only original label for shipping');
                        $this->pdf->Text(13, $y = $y + 4, 'Using a photocopy for shipping purposes is fraudulent and may result in additional charges and your account being cancelled.');
                        break;
                }
                break;

            default:

                switch ($labelType) {
                    case 'DRIVER':
                        $this->pdf->SetFillColor(0, 0, 0);
                        $this->pdf->SetTextColor(255, 255, 255);
                        $this->pdf->SetXY(0, 0);
                        $this->pdf->Cell(102, 5, 'Master Copy - Please give to Driver', 1, 0, 0, true);
                        break;

                    case 'CUSTOMER':
                        $this->pdf->SetFillColor(0, 0, 0);
                        $this->pdf->SetTextColor(255, 255, 255);
                        $this->pdf->SetXY(0, 0);
                        $this->pdf->Cell(102, 5, $labelType.' Copy  - IFS Ref : '.$shipment->consignment_number, 1, 0, 0, true);
                        break;
                }
        }
    }

    public function importUploadedDocuments($shipment, $documentType = 'invoice', $copies = 1)
    {
        $documents = $shipment->documents()->where('document_type', $documentType)->get();

        foreach ($documents as $document) {
            $tempFile = 'temp/invoice'.$document->id.'.pdf';

            // If the temp file does not exist, download from S3
            if (! file_exists(storage_path('app/'.$tempFile))) {
                if (Storage::disk('s3')->exists($document->path)) {
                    $pdf = Storage::disk('s3')->get($document->path);
                    Storage::disk('local')->put($tempFile, $pdf);
                }
            }

            if (file_exists(storage_path('app/'.$tempFile))) {
                $pageCount = 0;

                try {
                    $pageCount = $this->pdf->setSourceFile(storage_path('app/'.$tempFile));
                } catch (\Exception $exc) {
                    Mail::to(($this->user) ? $this->user->email : 'courier@antrim.ifsgroup.com')->queue(new \App\Mail\GenericError('Document Error - '.$shipment->consignment_number, 'Warning, unable to include uploaded documents for shipment '.$shipment->consignment_number));
                }

                if ($pageCount > 0) {
                    for ($i = 0; $i < $copies; $i++) {
                        for ($pageNo = 1; $pageNo <= $pageCount; $pageNo++) {
                            $tpl = $this->pdf->importPage($pageNo);

                            // get the size of the imported page
                            $size = $this->pdf->getTemplateSize($tpl);

                            // create a page (landscape or portrait depending on the imported page size)
                            if ($size['w'] > $size['h']) {
                                $this->pdf->addPage('L', [$size['w'], $size['h']]);
                            } else {
                                $this->pdf->addPage('P', [$size['w'], $size['h']]);
                            }

                            $this->pdf->useTemplate($tpl);
                        }
                    }
                }
            }
        }
    }

    /**
     * Generates a commercial invoice.
     *
     * @param  string  $token  Shipment identifier.
     * @param  array  $parameters  An array of options for customising invoice.
     *
     * @return  mixed
     */
    public function createCommercialInvoice($token, $parameters = [], $output = true)
    {
        if (! $shipment = Shipment::whereToken($token)->first()) {
            return false;
        }

        // Check for parameters or use saved values as default
        $type = isset($parameters['type']) ? $parameters['type'] : $shipment->invoice_type;
        $ultimate_destination = isset($parameters['ultimate_destination']) ? $parameters['ultimate_destination'] : $shipment->ultimate_destination_country_code;
        $comments = isset($parameters['comments']) ? $parameters['comments'] : $shipment->commercial_invoice_comments;
        $incoterm = isset($parameters['incoterm']) ? $parameters['incoterm'] : $shipment->terms_of_sale;
        $template = null;

        $requiredLines = $this->countLines($shipment->contents);

        if ($requiredLines > 19) {
            $template = '2_page_';
        }

        // If available get description of ship reason else use the code
        $shipReason = $shipment->ship_reason;
        if (isset($shipment->ship_reason)) {
            $reason = \App\Models\ShipReason::where('code', $shipment->ship_reason)->first();
            if ($reason) {
                $shipReason = $reason->description;
            }
        }

        if ($type == 'p') {
            $this->pdf->setSourceFile(storage_path('app/templates/proforma_invoice_'.$template.$this->size.'.pdf'));
            $filenamePrefix = 'PI';
        } else {
            $this->pdf->setSourceFile(storage_path('app/templates/commercial_invoice_'.$template.$this->size.'.pdf'));
            $filenamePrefix = 'CI';
        }

        $tpl = $this->pdf->importPage(1);
        $size = $this->pdf->getTemplateSize($tpl);

        $this->pdf->AddPage('P', [$size['w'], $size['h']]);
        $this->pdf->useTemplate($tpl);

        $this->pdf->SetFont($this->font, '', 15);
        $this->pdf->Text(6, 25, $shipment->carrier_tracking_number);
        $this->pdf->SetFont($this->font, '', 10);
        $this->pdf->Text(6, 39, $shipment->ship_date->format('d-m-Y'));
        $this->pdf->Text(103.5, 39, $shipment->consignment_number.'  /  '.$shipment->shipment_reference);
        $this->pdf->Text(6, 50, $shipment->sender_name);
        $this->pdf->Text(6, 54, $shipment->sender_company_name);
        $this->pdf->Text(6, 58, $shipment->sender_address1);
        $this->pdf->Text(6, 62, $shipment->sender_address2);
        $this->pdf->Text(6, 66, $shipment->sender_city);
        $this->pdf->Text(6, 70, $shipment->sender_state.' '.$shipment->sender_postcode);
        $this->pdf->Text(6, 76, getCountry($shipment->sender_country_code));
        $this->pdf->Text(63, 50, 'Tel:'.$shipment->sender_telephone);
        $this->pdf->Text(103.5, 50, $shipment->recipient_name);
        $this->pdf->Text(103.5, 54, $shipment->recipient_company_name);
        $this->pdf->Text(103.5, 58, $shipment->recipient_address1);
        $this->pdf->Text(103.5, 62, $shipment->recipient_address2);
        $this->pdf->Text(103.5, 66, $shipment->recipient_city);
        $this->pdf->Text(103.5, 70, $shipment->recipient_state.' '.$shipment->recipient_postcode);
        $this->pdf->Text(103.5, 76, getCountry($shipment->recipient_country_code));
        $this->pdf->Text(165, 50, 'Tel:'.$shipment->recipient_telephone);
        $this->pdf->Text(6, 88, getCountry($shipment->sender_country_code));

        if (! empty($shipment->eori) || ! empty($shipment->company->eori)) {
            $this->pdf->SetFont($this->font, 'B', 10);
            $this->pdf->Text(63, 84, 'EORI');
            $this->pdf->SetFont($this->font, '', 10);
            $this->pdf->Text(63, 88, ($shipment->eori) ? $shipment->eori : $shipment->company->eori);
        }

        $this->pdf->Text(6, 99, ucfirst($shipReason));
        $this->pdf->Text(6, 109, getCountry($ultimate_destination));

        $yPos = 121;
        $this->pdf->SetFont($this->font, '', 7);

        $lines = 0;
        foreach ($shipment->contents as $key => $item) {
            // New line so Increase line count
            $lines++;

            // Work out vertical position on page
            $y = $yPos + $lines * 4;

            // Print package number
            $this->pdf->SetXY(6, $y);
            $this->pdf->Cell(5, 5, $item->package_index, 0, 0, 'L', false);

            // Print description
            if (strlen(trim($item->description)) > 50) {
                // Multi-line for long descriptions
                $wrapped = wordwrap(trim($item->description), 50, "\n", false);
                $desc = explode("\n", $wrapped);
                foreach ($desc as $descLine) {
                    $this->pdf->SetXY(16, $yPos + $lines * 4);
                    $this->pdf->Cell(78, 5, $descLine, 0, 0, 'L', false);
                    $lines++;
                }
                $lines = $lines - 1;
            } else {
                // Single line
                $this->pdf->SetXY(16, $yPos + $lines * 4);
                $this->pdf->Cell(78, 5, $item->description, 0, 0, 'L', false);
            }

            // Print rest of line
            $this->pdf->SetXY(95, $y);
            $this->pdf->Cell(5, 5, $item->country_of_manufacture, 0, 0, 'L', false);
            $this->pdf->SetXY(102, $y);
            $this->pdf->Cell(10, 5, (strlen($item->harmonized_code) > 5) ? $item->harmonized_code : $item->commodity_code, 0, 0, 'L', false);
            $this->pdf->SetXY(126, $y);
            $this->pdf->Cell(5, 5, $item->uom, 0, 0, 'C', false);
            $this->pdf->SetXY(132, $y);
            $this->pdf->Cell(15, 5, $item->quantity, 0, 0, 'R', false);
            $this->pdf->SetXY(150, $y);
            $this->pdf->Cell(15, 5, $item->unit_weight, 0, 0, 'R', false);
            $this->pdf->SetXY(167, $y);
            $this->pdf->Cell(15, 5, $item->unit_value, 0, 0, 'R', false);
            $this->pdf->SetXY(190, $y);
            $this->pdf->Cell(15, 5, number_format($item->quantity * $item->unit_value, 2), 0, 0, 'R', false);

            if ($lines > 19) {
                // Take a second page if necessary
                $tpl = $this->pdf->importPage(2);
                $this->pdf->AddPage('P', [$size['w'], $size['h']]);
                $this->pdf->useTemplate($tpl);
                $yPos = 24;
                $lines = 0;
            }
        }

        $this->pdf->SetTextColor(000, 0, 0);
        $this->pdf->SetFont($this->font, '', 10);
        $this->pdf->Text(149, 223, $shipment->customs_value);
        $this->pdf->Text(184, 223, $shipment->customs_value_currency_code);
        $this->pdf->Text(149, 233, $shipment->pieces);
        $this->pdf->Text(149, 243, $shipment->weight.' '.strtoupper($shipment->weight_uom));
        $this->pdf->Text(149, 253, strtoupper($incoterm));

        $this->pdf->SetFont($this->font, '', 8);
        $this->pdf->Text(7, 237, $comments);

        if ($output) {
            return $this->displayPdf($filenamePrefix.'_'.$shipment->consignment_number.'.pdf', true);
        }
    }

    public function countLines($content)
    {
        $lines = 0;
        foreach ($content as $key => $item) {
            // Print description
            if (strlen(trim($item->description)) > 50) {
                // Multi-line for long descriptions
                $wrapped = wordwrap(trim($item->description), 50, "\n", false);
                $desc = explode("\n", $wrapped);
                foreach ($desc as $descLine) {
                    $lines++;
                }
            } else {
                // Single line
                $lines++;
            }
        }

        return $lines;
    }

    /**
     * Batched commercial invoices.
     *
     * @param  type  $shipments
     *
     * @return type
     */
    public function createBatchedCommercialInvoices($shipments)
    {
        foreach ($shipments as $shipment) {
            $this->createCommercialInvoice($shipment->token, [], false);
        }

        return $this->displayPdf('commercial_invoices.pdf', true);
    }

    /**
     * Driver manifest PDF.
     *
     * @param  type  $driverManifest
     *
     * @return pdf
     */
    public function createDriverManifest($driverManifest)
    {
        // Add a blank page to the document
        $this->pdf->AddPage('P');

        $this->pdf->SetFont($this->font, 'BU', 15);

        $date = date('d-m-Y H:i', time());

        $this->pdf->Text(9, 5, $driverManifest->driver->name.' - '.$driverManifest->date->format('l jS F, Y'));

        $this->pdf->SetFont($this->font, 'BI', 12);
        $this->pdf->Text(155, 6, "Printed $date");

        $jobsByLocation = $driverManifest->getJobsByLocation();

        $this->pdf->SetY(12);

        $locationCount = 0;

        foreach ($jobsByLocation as $location):

            $locationCount++;

            $this->pdf->SetFont($this->font, 'B', 9);
            $this->pdf->Cell(50, 8, "Location $locationCount");
            $this->pdf->Ln(7);

            $this->pdf->SetFont($this->font, 'I', 6);
            $this->pdf->SetFillColor(221, 221, 221);
            $this->pdf->Cell(5, 5, '#', 1, 0, 'L', true);
            $this->pdf->Cell(18, 5, 'REFERENCE', 1, 0, 'L', true);
            $this->pdf->Cell(8, 5, 'TYPE', 1, 0, 'C', true);
            $this->pdf->Cell(72, 5, 'FROM', 1, 0, 'L', true);
            $this->pdf->Cell(72, 5, 'TO', 1, 0, 'L', true);
            $this->pdf->Cell(10, 5, 'COD (£)', 1, 0, 'R', true);
            $this->pdf->Cell(10, 5, 'PIECES', 1, 0, 'R', true);

            $this->pdf->Ln();

            $this->pdf->SetFont($this->font, '', 6);
            $this->pdf->SetFillColor(255, 255, 255);

            $i = 1;

            foreach ($location['jobs'] as $transportJob):
                $this->pdf->Cell(5, 5, $i, 1, 0, 'L', true);
                $this->pdf->Cell(18, 5, ($transportJob->reference) ? $transportJob->reference : $transportJob->scs_job_number, 1, 0, 'L', true);
                $this->pdf->Cell(8, 5, strtoupper($transportJob->type), 1, 0, 'C', true);
                $this->pdf->Cell(72, 5, $transportJob->from_company_name.','.$transportJob->from_city.' '.$transportJob->from_postcode, 1, 0, 'L', true);
                $this->pdf->Cell(72, 5, $transportJob->to_company_name.','.$transportJob->to_city.' '.$transportJob->to_postcode, 1, 0, 'L', true);
                $this->pdf->Cell(10, 5, $transportJob->cash_on_delivery, 1, 0, 'R', true);
                $this->pdf->Cell(10, 5, $transportJob->pieces, 1, 0, 'R', true);
                $this->pdf->Ln();
                $i++;
            endforeach;

            $this->pdf->SetFont($this->font, 'B', 7);
            $this->pdf->Cell(5, 5, null, 1, 0, 'L', true);
            $this->pdf->Cell(18, 5, null, 1, 0, 'L', true);
            $this->pdf->Cell(8, 5, null, 1, 0, 'L', true);
            $this->pdf->Cell(72, 5, null, 1, 0, 'L', true);
            $this->pdf->Cell(72, 5, null, 1, 0, 'L', true);
            $this->pdf->Cell(10, 5, number_format($location['cod'], 2), 1, 0, 'R', true);
            $this->pdf->Cell(10, 5, $location['pieces'], 1, 0, 'R', true);
            $this->pdf->Ln(9);

        endforeach;

        return $this->displayPdf($driverManifest->number.'.pdf', true);
    }

    /**
     * Quotation PDF.
     *
     * @param  type  $driverManifest
     *
     * @return pdf
     */
    public function createQuotation($quotation)
    {
        $this->pdf->setSourceFile(storage_path('app/templates/quotation.pdf'));

        $tpl = $this->pdf->importPage(1);
        $size = $this->pdf->getTemplateSize($tpl);

        $this->pdf->AddPage('P', [$size['w'], $size['h']]);
        $this->pdf->useTemplate($tpl);
        $this->pdf->SetFont($this->font, '', 12);
        $this->pdf->Text(30, 61, $quotation->contact.', '.$quotation->company_name);
        $this->pdf->Text(30, 67.5, $quotation->email);
        $this->pdf->Text(30, 74, $quotation->user->name);
        $this->pdf->Text(30, 80.5, $quotation->created_at);
        $this->pdf->Text(163, 80.5, $quotation->reference);
        $this->pdf->SetFont($this->font, '', 10);
        $this->pdf->Text(14, 107, $quotation->from_city.', '.getCountry($quotation->from_country_code));
        $this->pdf->Text(103, 107, $quotation->to_city.', '.getCountry($quotation->to_country_code));
        $this->pdf->Text(14, 118, $quotation->pieces);
        $this->pdf->Text(103, 118, $quotation->dimensions);
        $this->pdf->Text(14, 129.5, $quotation->weight.' KG');
        $this->pdf->Text(103, 129.5, $quotation->volumetric_weight.' KG');
        $this->pdf->Text(14, 141, $quotation->goods_description);
        $this->pdf->Text(103, 141, $quotation->rate_of_exchange);
        $this->pdf->Text(14, 152, $quotation->quote.' '.$quotation->currency_code);
        $this->pdf->Text(103, 152, $quotation->terms);
        $this->pdf->Text(14, 164, $quotation->special_requirements);
        $this->pdf->Text(103, 164, $quotation->valid_to->format('d-m-Y'));
        $this->pdf->SetXY(14, 175);
        $this->pdf->MultiCell(172, 50, $quotation->information, 0, 'L');
        $this->pdf->SetFont($this->font, '', 11);
        $this->pdf->Text(38, 226.5, $quotation->user->name);
        $this->pdf->Text(38, 233, '02894464211');
        $this->pdf->Text(38, 239, $quotation->user->email);

        return $this->displayPdf($quotation->id.'.pdf', true);
    }

    /**
     * Batched POD dockets.
     *
     * @param  type  $shipments
     *
     * @return type
     */
    public function createDriverManifestDockets($driverManifest)
    {
        foreach ($driverManifest->transportJobs as $transportJob) {
            if ($transportJob->type == 'd' || ($transportJob->type == 'c' && ! is_numeric($transportJob->shipment_id)) && $transportJob->staus_id != 7) {
                $this->createPodDocket($transportJob, $driverManifest, false);
            }
        }

        return $this->displayPdf($driverManifest->number.'_dockets.pdf', true);
    }

    /**
     * @param  type  $transportJob
     */
    public function createPodDocket($transportJob, $driverManifest = false, $output = true)
    {
        $printFormat = PrintFormat::whereCode($this->size)->first();

        $this->pdf->SetAutoPageBreak(true, 0);
        // Add a blank page to the document
        $this->pdf->AddPage('P', [$printFormat->width, $printFormat->height]);

        $x = 3;
        $y = 2;

        if ($transportJob->type == 'c') {
            $titleX = $x + 1;
        } else {
            $titleX = $x + 9;
        }

        $this->pdf->SetFont($this->font, 'B', 22);
        $this->pdf->Text($titleX, $y, 'PROOF OF '.strtoupper(verboseCollectionDelivery($transportJob->type)));
        $this->pdf->SetLineWidth(0.5);
        $this->pdf->Line(0, $y += 11.5, 110, $y); //horizontal

        $this->pdf->SetFont($this->font, 'BU', 8);

        if ($transportJob->type == 'c') {
            $this->pdf->Text($x, $y += 2, 'Collect From:');
        } else {
            $this->pdf->Text($x, $y += 2, 'Deliver To:');
        }

        $this->pdf->SetFont($this->font, '', 7);

        if ($transportJob->type == 'c') {
            $this->pdf->Text($x, $y += 5, strtoupper($transportJob->from_name));
            $this->pdf->Text($x, $y += 3, strtoupper($transportJob->from_company_name));
            $this->pdf->Text($x, $y += 3, strtoupper($transportJob->from_address1));
            $this->pdf->Text($x, $y += 3, strtoupper($transportJob->from_address2));
            $this->pdf->Text($x, $y += 3, strtoupper($transportJob->from_city.' '.$transportJob->from_postcode));
            $this->pdf->Text($x, $y += 3, strtoupper(getCountry($transportJob->from_country_code)));
            $this->pdf->Text($x, $y += 3.5, 'Tel: '.strtoupper($transportJob->from_telephone));
        } else {
            $this->pdf->Text($x, $y += 5, strtoupper($transportJob->to_name));
            $this->pdf->Text($x, $y += 3, strtoupper($transportJob->to_company_name));
            $this->pdf->Text($x, $y += 3, strtoupper($transportJob->to_address1));
            $this->pdf->Text($x, $y += 3, strtoupper($transportJob->to_address2));
            $this->pdf->Text($x, $y += 3, strtoupper($transportJob->to_city.' '.$transportJob->to_postcode));
            $this->pdf->Text($x, $y += 3, strtoupper(getCountry($transportJob->to_country_code)));
            $this->pdf->Text($x, $y += 3.5, 'Tel: '.strtoupper($transportJob->to_telephone));
        }

        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line(0, $y += 4.5, 110, $y); //horizontal
        // IFS logo
        $this->pdf->Image(public_path('/images/ifs_logo_bw.png'), 61, 16, 34.2, 24.8, 'png');

        $x = 3;
        $y = 36;

        $this->pdf->SetFont($this->font, '', 9);
        $this->pdf->Text($x, $y += 9, 'Pieces:');
        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line($x + 25, $y - 1.5, $x + 25, $y + 11); //vertical
        $this->pdf->Text($x + 28, $y, 'Weight:');
        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line($x + 59, $y - 1.5, $x + 59, $y + 11); //vertical
        $this->pdf->Text($x + 61, $y, 'Cash On '.ucfirst(verboseCollectionDelivery($transportJob->type)).':');
        $this->pdf->SetFont($this->font, 'B', 15);
        $this->pdf->Text($x, $y += 4, $transportJob->pieces);
        $this->pdf->Text($x + 28, $y, $transportJob->weight);
        $this->pdf->Text($x + 61, $y, $transportJob->cash_on_delivery);

        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line(0, $y += 7, 110, $y); //horizontal

        $this->pdf->SetFont($this->font, '', 9);
        $this->pdf->Text($x, $y += 1, 'Goods Description:');
        $this->pdf->SetFont($this->font, 'B', 15);
        $this->pdf->Text($x, $y += 4, $transportJob->goods_description);

        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line(0, $y += 7, 110, $y); //horizontal

        $this->pdf->SetFont($this->font, '', 9);

        if (is_numeric($transportJob->shipment_id)) {
            $this->pdf->Text($x, $y += 1, $transportJob->shipment->company->company_name.':');
        } else {
            $this->pdf->Text($x, $y += 1, 'Reference:');
        }

        $this->pdf->SetFont($this->font, 'B', 15);
        $this->pdf->Text($x, $y += 4, $transportJob->reference);

        if (strtoupper($transportJob->from_company_name) == 'IFS BOND') {
            $this->pdf->Text($x + 55, $y, '** IFS BOND **');
        }

        if (is_numeric($transportJob->shipment_id)) {
            $this->pdf->SetXY($x + 62, $y - 5);
            $this->pdf->Cell(55, 12, '', 0, 2, 'L', 1); //width,height,string
            $this->pdf->SetTextColor(255, 255, 255); // White font
            $this->pdf->SetFont($this->font, 'B', 30);
            $this->pdf->Text($x + 62, $y - 5, strtoupper($transportJob->shipment->service->code));
            $this->pdf->SetTextColor(0, 0, 0);  // Switch back to black font
        }

        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line(0, $y += 7, 110, $y); //horizontal

        $this->pdf->SetFont($this->font, 'B', 32);
        $this->pdf->Text($x + 12, $y += 2, $transportJob->number);
        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line(0, $y += 15, 110, $y); //horizontal

        $y = 92;
        $this->pdf->SetFont($this->font, '', 12);
        $this->pdf->Text($x, $y += 15, 'Print Name:');

        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line(35, $y + 5, 90, $y + 5); //horizontal

        $this->pdf->Text($x, $y += 12, 'Signature:');
        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line(35, $y + 5, 90, $y + 5); //horizontal

        $this->pdf->Text($x, $y += 12, 'Date / Time:');
        $this->pdf->SetLineWidth(0.3);
        $this->pdf->Line(35, $y + 5, 90, $y + 5); //horizontal

        if ($driverManifest) {
            $this->pdf->SetFont($this->font, 'B', 7);
            $this->pdf->SetX(0);
            $this->pdf->SetY(147);
            $this->pdf->Cell(84, 5, $driverManifest->driver->name.' - '.$driverManifest->number.' - '.$driverManifest->date->format('l jS F, Y'), 0, 0, 'C');
        }

        if ($output) {
            return $this->displayPdf($transportJob->number.'.pdf', true);
        }
    }
}
